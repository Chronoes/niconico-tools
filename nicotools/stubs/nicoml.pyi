# coding: UTF-8
import logging
from pathlib import Path
from typing import Tuple, Optional, List, Dict, TypeVar, Union

import requests

from nicotools import utils

VideoId = TypeVar("VideoId", List[str, ...], Tuple[str, ...])
MylistId = TypeVar("MylistId", int, str)
LoggerType = TypeVar("LoggerType", bound=logging.Logger)
ContainerType = TypeVar("ContainerType", List[List[str]])
IS_DEBUG = ...  # type: int


class NicoMyList(utils.Canopy):
    WHY_DELETED = ...  # type: Dict

    def __init__(self, mail: Optional[str]=...,
                 password: Optional[str]=...,
                 logger: Optional[LoggerType]=...):
        super().__init__(...)
        self.session = ...  # type: requests.Session
        self.mylists = ...  # type: Dict[int, Dict[str, Union[int, str, bool]]]
        self.token = ...  # type: str
    @classmethod
    def _confirmation(cls, mode: str, list_name: str,
                      contents_to_be_deleted: Optional[List[str]]=...) -> bool: ...
    def _should_continue(self, res: Dict[str, Union[Dict, str]],
                         video_id: str, list_name: str,
                         count_now: int, count_whole: int) -> bool: ...
    def get_mylists_info(self) -> Dict[int, Dict[str, Union[int, str, bool]]]: ...
    @classmethod
    def _get_jst_from_utime(cls, timestamp: int) -> str: ...
    def get_list_id(self, search_for: MylistId) -> Dict[str, Union[int, str, dict]]: ...
    def _get_list_id(self, search_for: MylistId) -> Tuple[int, str]: ...
    def get_item_ids(self, list_id: MylistId, *videoids: VideoId) -> Dict[str, str]: ...
    def get_title(self, video_id: str) -> str: ...
    def get_response(self, mode: str, **kwargs) -> Dict: ...

    def create_mylist(self, mylist_name: str, is_public: bool=..., description: str = ...) -> bool: ...
    def purge_mylist(self, list_id: MylistId, confident: bool=...) -> bool: ...
    def add(self, list_id: MylistId, *videoids: VideoId) -> bool: ...
    def copy(self, list_id_from: MylistId, list_id_to: MylistId, *videoids: VideoId) -> bool: ...
    def move(self, list_id_from: MylistId, list_id_to: MylistId, *videoids: VideoId) -> bool: ...
    def delete(self, list_id: MylistId, *videoids: VideoId, confident: bool=...) -> bool: ...
    def fetch_meta(self, with_header: bool=...) -> ContainerType: ...
    def fetch_one(self, list_id: MylistId,
                  with_header: bool=...) -> ContainerType: ...
    def fetch_all(self, with_info: bool=...) -> ContainerType: ...
    def show(self, list_id: MylistId,
             file_name: Optional[Union[str, Path]]=...,
             table: bool=...,
             survey: bool=...) -> str: ...
    def export(self, list_id: MylistId,
               file_name: Optional[str]=...,
               survey: bool=...) -> str: ...

    @classmethod
    def _construct_id(cls, container: ContainerType) -> str: ...
    @classmethod
    def _construct_id_name(cls, container: ContainerType) -> str: ...
    @classmethod
    def _construct_tsv(cls, container: ContainerType) -> str: ...
    @classmethod
    def _construct_table(cls, container: ContainerType) -> str: ...
    def _writer(self, text: str, file_name: Union[str, Path]=...) -> str: ...

    def download(self, video_id, flag): ...
    def start(self, glossary, save_dir, option): ...
    def _saver(self, video_id, data, option): ...
