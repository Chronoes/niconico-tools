# coding: utf-8
from abc import ABCMeta, abstractmethod
from typing import Any, List, Dict, Union, Optional, TypeVar, Tuple
import logging
import requests

from utility_func import MyLogger, LogIn

DatabaseType = Dict[str, Dict[str, Union[int, str, List[str]]]]
LoggerType = TypeVar("LoggerType", bound=logging.Logger)

def print_info(queue: List[str], file_name: str=None) -> None: ...
def get_infos(queue: List[str], logger: MyLogger) -> DatabaseType: ...
def t2filename(text: str) -> str: ...


class GetResources(LogIn, metaclass=ABCMeta):
    def __init__(self, auth, session: Optional[requests.Session] = ...,
                 logger: LoggerType = ...) -> None:
        super().__init__(auth, session, logger)
        self.database = ...  # type: Optional[DatabaseType]
        self.save_dir = ...  # type: str
        self.logger = ...  # type: Union[LoggerType, "AltLogger"]
        self.session = ...  # type: requests.Session
        ...
    class AltLogger:
        def emitter(self, text: str, err: bool=..., en: str=...) -> None: ...
        def debug(self, text: str) -> None: ...
        def info(self, text: str) -> None: ...
        def error(self, text: str) -> None: ...
        def warning(self, text: str) -> None: ...
        def critical(self, text: str) -> None: ...
    def make_dir(self, save_dir: str) -> None: ...
    @abstractmethod
    def start(self, database: DatabaseType, save_dir: str) ->None: ...
    @abstractmethod
    def download(self, video_id: str) -> bool: ...


class GetVideos(GetResources):
    def __init__(self, auth: Tuple[Optional[str], Optional[str]]=...,
                 session: Optional[requests.Session]=...,
                 logger: Optional[MyLogger]=...) -> None:
        super().__init__(auth, session, logger)
        self.widgets = ...  # type: List
        self.so_video_id = ...  # type: str
        ...
    def start(self, database: DatabaseType, save_dir: str) ->None: ...
    def download(self, video_id: str, chunk_size: int=...) -> bool: ...
    def make_file_name(self, video_id: str) -> str: ...


class GetThumbnails(GetResources):
    def __init__(self, auth: Tuple[Optional[str], Optional[str]]=...,
                 logger: Optional[MyLogger]=...) -> None:
        super().__init__(auth, None, logger)
        ...
    def start(self, database: DatabaseType, save_dir: str) ->None: ...
    def _download(self, video_id: str, is_large: bool=..., retry: int=...) \
            -> Union[bool, requests.Response]: ...
    def download(self, video_id: str) -> bool: ...
    def make_file_name(self, video_id: str) -> str: ...


class GetComments(GetResources):
    def __init__(self, auth: Tuple[Optional[str], Optional[str]]=...,
                 session: Optional[requests.Session]=...,
                 logger: Optional[MyLogger]=...) -> None:
        super().__init__(logger, session)
        self.so_video_id = ...  # type: str
        ...
    def start(self, database: DatabaseType, save_dir: str) ->None: ...
    def download(self, video_id: str) -> bool: ...
    def get_thread_key(self, video_id: str) -> str: ...
    def make_param_xml(self, user_id: str, thread_id: str) -> str: ...
    def make_param_json(self, user_id: str, user_key: str, thread_id: str,
                        optional_thread_id: str, thread_key: str, force_184: str) -> List[Dict]: ...
    def make_file_name(self, video_id: str) -> str: ...

def main(args: Any) -> None: ...
